1- run command for requirement file
 - npm init -y
 - npm i express
 - echo > app.js

 2- write code in app.js

 3- change code in package.json

    -> "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },

  change to ->

  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },

  --> Now run command 
  -npm dev run

  ....Then start server...

4- Next setup (routes & controllers) using express routers

-> create folder 
  - mkdir routes
    ->create products.js   and write code

  - mkdir controllers
    -> create products.js   and write code

5- testing api for postman... #4 vdo 

6- build mongodb database.. 
  - create project , choose server and continue this process..
  - then copy username and password
  -> userName - abhisekgochhayat23
  -> passWord - Z0mPbB6CqOm8LTpI
  
  
7- setup mongodb database
 
 - open database and connect option click then follow instruction
 
 - Add your connection string into your application code

  -> mongodb+srv://abhisekgochhayat23:<password>@sampleapi.cxonx2i.mongodb.net/<database>?retryWrites=true&w=majority
  -> note- Replace <password> and <database> with the password for the abhisekgochhayat23 user. Ensure any option params are URL encoded

8- create a db folder. 
 - inside db folder create connect.js

9- add mongoose in project follow this command -> npm i mongoose
-> then write code in connect.js file .
 add uri -> "mongodb+srv://abhisekgochhayat23:Z0mPbB6CqOm8LTpI@sampleapi.cxonx2i.mongodb.net/sampleAPI?retryWrites=true&w=majority" 


 note - your server is not started and database already connected when check the ip adress for mongodb project on network access.


 10- Secure your personal data with DOTENV 
  -> first DOTENV extension download for vs code
  -> then run cmd - npm i dotenv
  -> create .env file and secure your url  (auto toggle option)
  
11- create a folder models   cmd-> mkdir models
    -> inside folder create a file product.js
    -> create schema and exports.

12-  create a json file products.json and productDB.js

 -> write code productDB.js 
 -> then run for save json file to database
        cmd -> node productDB.js 
 -> successful json data uploaded database.

 13- controllers folder inside product.js file 
     some change to request ->
     const myData = await Product.find({});
     res.status(200).json(myData);

14- Filtration & Searching Functionality with Query Props-
  
  -> const myDataTesting = await Product.find(req.query);
 
  -> filter code 
     if (name) {
        queryObject.name = { $regex : name, $options: "i"};
        //if user search "iph" to show similar word .
    }

15- Sorting
------------------

                // for "price" ->  Ascending 
                // for "-price" -> Descending

16- Select
-----------

same process like Sorting method. 

-> note. - check the code for -> ./controllers/products.js


17 - Add Pagination in Rest API 

  -> Here code 
    // pagination.
    let page = Number(req.query.page) || 1;
    let limit = Number(req.query.limit) || 3;
    let skip = (page-1)* limit; //formula

    apiData = apiData.skip(skip).limit(limit);

18 - Live Hosting
   
  -> railway.app website 
